//! Zhuyin/Bopomofo engine for libzhuyin
//!
//! This engine provides the same interface as libpinyin but specialized for
//! Zhuyin/Bopomofo input method.
//!
//! This is now a thin wrapper around the generic core::Engine<ZhuyinParser>.

use std::error::Error;
use std::sync::Arc;

use crate::parser::ZhuyinParser;
use libchinese_core::{Candidate, Lexicon, Model, UserDict, WordBigram};

/// All standard zhuyin/bopomofo syllables with tone marks.
/// Generated from tsi.table - 1388 unique syllables.
/// All standard zhuyin/bopomofo syllables with tone marks.
/// Generated from tsi.table - 1388 unique syllables.
pub const ZHUYIN_SYLLABLES: &[&str] = &[
    "ㄅㄚ",
    "ㄅㄚˇ",
    "ㄅㄚˊ",
    "ㄅㄚˋ",
    "ㄅㄚ˙",
    "ㄅㄛ",
    "ㄅㄛˇ",
    "ㄅㄛˊ",
    "ㄅㄛˋ",
    "ㄅㄛ˙",
    "ㄅㄞ",
    "ㄅㄞˇ",
    "ㄅㄞˊ",
    "ㄅㄞˋ",
    "ㄅㄟ",
    "ㄅㄟˇ",
    "ㄅㄟˋ",
    "ㄅㄟ˙",
    "ㄅㄠ",
    "ㄅㄠˇ",
    "ㄅㄠˊ",
    "ㄅㄠˋ",
    "ㄅㄢ",
    "ㄅㄢˇ",
    "ㄅㄢˋ",
    "ㄅㄣ",
    "ㄅㄣˇ",
    "ㄅㄣˋ",
    "ㄅㄤ",
    "ㄅㄤˇ",
    "ㄅㄤˋ",
    "ㄅㄥ",
    "ㄅㄥˇ",
    "ㄅㄥˊ",
    "ㄅㄥˋ",
    "ㄅㄧ",
    "ㄅㄧˇ",
    "ㄅㄧˊ",
    "ㄅㄧˋ",
    "ㄅㄧㄝ",
    "ㄅㄧㄝˇ",
    "ㄅㄧㄝˊ",
    "ㄅㄧㄝˋ",
    "ㄅㄧㄠ",
    "ㄅㄧㄠˇ",
    "ㄅㄧㄠˋ",
    "ㄅㄧㄢ",
    "ㄅㄧㄢˇ",
    "ㄅㄧㄢˋ",
    "ㄅㄧㄣ",
    "ㄅㄧㄣˇ",
    "ㄅㄧㄣˋ",
    "ㄅㄧㄥ",
    "ㄅㄧㄥˇ",
    "ㄅㄧㄥˋ",
    "ㄅㄨ",
    "ㄅㄨˇ",
    "ㄅㄨˊ",
    "ㄅㄨˋ",
    "ㄅㄨ˙",
    "ㄆㄚ",
    "ㄆㄚˊ",
    "ㄆㄚˋ",
    "ㄆㄚ˙",
    "ㄆㄛ",
    "ㄆㄛˇ",
    "ㄆㄛˊ",
    "ㄆㄛˋ",
    "ㄆㄞ",
    "ㄆㄞˇ",
    "ㄆㄞˊ",
    "ㄆㄞˋ",
    "ㄆㄟ",
    "ㄆㄟˇ",
    "ㄆㄟˊ",
    "ㄆㄟˋ",
    "ㄆㄠ",
    "ㄆㄠˇ",
    "ㄆㄠˊ",
    "ㄆㄠˋ",
    "ㄆㄡ",
    "ㄆㄡˇ",
    "ㄆㄡˊ",
    "ㄆㄢ",
    "ㄆㄢˇ",
    "ㄆㄢˊ",
    "ㄆㄢˋ",
    "ㄆㄣ",
    "ㄆㄣˇ",
    "ㄆㄣˊ",
    "ㄆㄣˋ",
    "ㄆㄤ",
    "ㄆㄤˇ",
    "ㄆㄤˊ",
    "ㄆㄤˋ",
    "ㄆㄥ",
    "ㄆㄥˇ",
    "ㄆㄥˊ",
    "ㄆㄥˋ",
    "ㄆㄧ",
    "ㄆㄧˇ",
    "ㄆㄧˊ",
    "ㄆㄧˋ",
    "ㄆㄧㄝ",
    "ㄆㄧㄝˇ",
    "ㄆㄧㄝˋ",
    "ㄆㄧㄠ",
    "ㄆㄧㄠˇ",
    "ㄆㄧㄠˊ",
    "ㄆㄧㄠˋ",
    "ㄆㄧㄢ",
    "ㄆㄧㄢˇ",
    "ㄆㄧㄢˊ",
    "ㄆㄧㄢˋ",
    "ㄆㄧㄣ",
    "ㄆㄧㄣˇ",
    "ㄆㄧㄣˊ",
    "ㄆㄧㄣˋ",
    "ㄆㄧㄥ",
    "ㄆㄧㄥˇ",
    "ㄆㄧㄥˊ",
    "ㄆㄧㄥˋ",
    "ㄆㄨ",
    "ㄆㄨˇ",
    "ㄆㄨˊ",
    "ㄆㄨˋ",
    "ㄇㄚ",
    "ㄇㄚˇ",
    "ㄇㄚˊ",
    "ㄇㄚˋ",
    "ㄇㄚ˙",
    "ㄇㄛ",
    "ㄇㄛˇ",
    "ㄇㄛˊ",
    "ㄇㄛˋ",
    "ㄇㄛ˙",
    "ㄇㄜ˙",
    "ㄇㄞˇ",
    "ㄇㄞˊ",
    "ㄇㄞˋ",
    "ㄇㄟˇ",
    "ㄇㄟˊ",
    "ㄇㄟˋ",
    "ㄇㄟ˙",
    "ㄇㄠ",
    "ㄇㄠˇ",
    "ㄇㄠˊ",
    "ㄇㄠˋ",
    "ㄇㄡˇ",
    "ㄇㄡˊ",
    "ㄇㄡˋ",
    "ㄇㄢˇ",
    "ㄇㄢˊ",
    "ㄇㄢˋ",
    "ㄇㄣ",
    "ㄇㄣˇ",
    "ㄇㄣˊ",
    "ㄇㄣˋ",
    "ㄇㄣ˙",
    "ㄇㄤˇ",
    "ㄇㄤˊ",
    "ㄇㄥ",
    "ㄇㄥˇ",
    "ㄇㄥˊ",
    "ㄇㄥˋ",
    "ㄇㄧ",
    "ㄇㄧˇ",
    "ㄇㄧˊ",
    "ㄇㄧˋ",
    "ㄇㄧㄝ",
    "ㄇㄧㄝˋ",
    "ㄇㄧㄠ",
    "ㄇㄧㄠˇ",
    "ㄇㄧㄠˊ",
    "ㄇㄧㄠˋ",
    "ㄇㄧㄡ",
    "ㄇㄧㄡˋ",
    "ㄇㄧㄢˇ",
    "ㄇㄧㄢˊ",
    "ㄇㄧㄢˋ",
    "ㄇㄧㄣˇ",
    "ㄇㄧㄣˊ",
    "ㄇㄧㄥˇ",
    "ㄇㄧㄥˊ",
    "ㄇㄧㄥˋ",
    "ㄇㄨˇ",
    "ㄇㄨˊ",
    "ㄇㄨˋ",
    "ㄈㄚ",
    "ㄈㄚˇ",
    "ㄈㄚˊ",
    "ㄈㄚˋ",
    "ㄈㄛˊ",
    "ㄈㄟ",
    "ㄈㄟˇ",
    "ㄈㄟˊ",
    "ㄈㄟˋ",
    "ㄈㄡ",
    "ㄈㄡˇ",
    "ㄈㄡˊ",
    "ㄈㄡˋ",
    "ㄈㄢ",
    "ㄈㄢˇ",
    "ㄈㄢˊ",
    "ㄈㄢˋ",
    "ㄈㄣ",
    "ㄈㄣˇ",
    "ㄈㄣˊ",
    "ㄈㄣˋ",
    "ㄈㄤ",
    "ㄈㄤˇ",
    "ㄈㄤˊ",
    "ㄈㄤˋ",
    "ㄈㄤ˙",
    "ㄈㄥ",
    "ㄈㄥˇ",
    "ㄈㄥˊ",
    "ㄈㄥˋ",
    "ㄈㄨ",
    "ㄈㄨˇ",
    "ㄈㄨˊ",
    "ㄈㄨˋ",
    "ㄉㄚ",
    "ㄉㄚˇ",
    "ㄉㄚˊ",
    "ㄉㄚˋ",
    "ㄉㄚ˙",
    "ㄉㄜˊ",
    "ㄉㄜ˙",
    "ㄉㄞ",
    "ㄉㄞˇ",
    "ㄉㄞˋ",
    "ㄉㄟˇ",
    "ㄉㄠ",
    "ㄉㄠˇ",
    "ㄉㄠˊ",
    "ㄉㄠˋ",
    "ㄉㄡ",
    "ㄉㄡˇ",
    "ㄉㄡˋ",
    "ㄉㄢ",
    "ㄉㄢˇ",
    "ㄉㄢˋ",
    "ㄉㄣˋ",
    "ㄉㄤ",
    "ㄉㄤˇ",
    "ㄉㄤˋ",
    "ㄉㄤ˙",
    "ㄉㄥ",
    "ㄉㄥˇ",
    "ㄉㄥˋ",
    "ㄉㄧ",
    "ㄉㄧˇ",
    "ㄉㄧˊ",
    "ㄉㄧˋ",
    "ㄉㄧ˙",
    "ㄉㄧㄝ",
    "ㄉㄧㄝˊ",
    "ㄉㄧㄝˋ",
    "ㄉㄧㄝ˙",
    "ㄉㄧㄠ",
    "ㄉㄧㄠˇ",
    "ㄉㄧㄠˋ",
    "ㄉㄧㄡ",
    "ㄉㄧㄢ",
    "ㄉㄧㄢˇ",
    "ㄉㄧㄢˋ",
    "ㄉㄧㄥ",
    "ㄉㄧㄥˇ",
    "ㄉㄧㄥˋ",
    "ㄉㄨ",
    "ㄉㄨˇ",
    "ㄉㄨˊ",
    "ㄉㄨˋ",
    "ㄉㄨㄛ",
    "ㄉㄨㄛˇ",
    "ㄉㄨㄛˊ",
    "ㄉㄨㄛˋ",
    "ㄉㄨㄛ˙",
    "ㄉㄨㄟ",
    "ㄉㄨㄟˇ",
    "ㄉㄨㄟˋ",
    "ㄉㄨㄢ",
    "ㄉㄨㄢˇ",
    "ㄉㄨㄢˋ",
    "ㄉㄨㄣ",
    "ㄉㄨㄣˇ",
    "ㄉㄨㄣˋ",
    "ㄉㄨㄥ",
    "ㄉㄨㄥˇ",
    "ㄉㄨㄥˋ",
    "ㄊㄚ",
    "ㄊㄚˇ",
    "ㄊㄚˋ",
    "ㄊㄜˋ",
    "ㄊㄞ",
    "ㄊㄞˊ",
    "ㄊㄞˋ",
    "ㄊㄠ",
    "ㄊㄠˇ",
    "ㄊㄠˊ",
    "ㄊㄠˋ",
    "ㄊㄠ˙",
    "ㄊㄡ",
    "ㄊㄡˇ",
    "ㄊㄡˊ",
    "ㄊㄡˋ",
    "ㄊㄡ˙",
    "ㄊㄢ",
    "ㄊㄢˇ",
    "ㄊㄢˊ",
    "ㄊㄢˋ",
    "ㄊㄤ",
    "ㄊㄤˇ",
    "ㄊㄤˊ",
    "ㄊㄤˋ",
    "ㄊㄥˊ",
    "ㄊㄧ",
    "ㄊㄧˇ",
    "ㄊㄧˊ",
    "ㄊㄧˋ",
    "ㄊㄧㄝ",
    "ㄊㄧㄝˇ",
    "ㄊㄧㄝˋ",
    "ㄊㄧㄠ",
    "ㄊㄧㄠˇ",
    "ㄊㄧㄠˊ",
    "ㄊㄧㄠˋ",
    "ㄊㄧㄢ",
    "ㄊㄧㄢˇ",
    "ㄊㄧㄢˊ",
    "ㄊㄧㄢˋ",
    "ㄊㄧㄥ",
    "ㄊㄧㄥˇ",
    "ㄊㄧㄥˊ",
    "ㄊㄧㄥˋ",
    "ㄊㄨ",
    "ㄊㄨˇ",
    "ㄊㄨˊ",
    "ㄊㄨˋ",
    "ㄊㄨㄛ",
    "ㄊㄨㄛˇ",
    "ㄊㄨㄛˊ",
    "ㄊㄨㄛˋ",
    "ㄊㄨㄟ",
    "ㄊㄨㄟˇ",
    "ㄊㄨㄟˊ",
    "ㄊㄨㄟˋ",
    "ㄊㄨㄢ",
    "ㄊㄨㄢˇ",
    "ㄊㄨㄢˊ",
    "ㄊㄨㄢˋ",
    "ㄊㄨㄣ",
    "ㄊㄨㄣˇ",
    "ㄊㄨㄣˊ",
    "ㄊㄨㄣˋ",
    "ㄊㄨㄥ",
    "ㄊㄨㄥˇ",
    "ㄊㄨㄥˊ",
    "ㄊㄨㄥˋ",
    "ㄋㄚˇ",
    "ㄋㄚˊ",
    "ㄋㄚˋ",
    "ㄋㄚ˙",
    "ㄋㄜ",
    "ㄋㄜˊ",
    "ㄋㄜˋ",
    "ㄋㄜ˙",
    "ㄋㄞˇ",
    "ㄋㄞˊ",
    "ㄋㄞˋ",
    "ㄋㄟˇ",
    "ㄋㄟˋ",
    "ㄋㄠ",
    "ㄋㄠˇ",
    "ㄋㄠˊ",
    "ㄋㄠˋ",
    "ㄋㄡˇ",
    "ㄋㄡˊ",
    "ㄋㄡˋ",
    "ㄋㄢ",
    "ㄋㄢˇ",
    "ㄋㄢˊ",
    "ㄋㄢˋ",
    "ㄋㄣˋ",
    "ㄋㄤˇ",
    "ㄋㄤˊ",
    "ㄋㄤˋ",
    "ㄋㄤ˙",
    "ㄋㄥˇ",
    "ㄋㄥˊ",
    "ㄋㄥˋ",
    "ㄋㄧˇ",
    "ㄋㄧˊ",
    "ㄋㄧˋ",
    "ㄋㄧㄚˊ",
    "ㄋㄧㄝ",
    "ㄋㄧㄝˊ",
    "ㄋㄧㄝˋ",
    "ㄋㄧㄠˇ",
    "ㄋㄧㄠˋ",
    "ㄋㄧㄡ",
    "ㄋㄧㄡˇ",
    "ㄋㄧㄡˊ",
    "ㄋㄧㄡˋ",
    "ㄋㄧㄢˇ",
    "ㄋㄧㄢˊ",
    "ㄋㄧㄢˋ",
    "ㄋㄧㄣˇ",
    "ㄋㄧㄣˊ",
    "ㄋㄧㄤˊ",
    "ㄋㄧㄤˋ",
    "ㄋㄧㄥˇ",
    "ㄋㄧㄥˊ",
    "ㄋㄧㄥˋ",
    "ㄋㄨˇ",
    "ㄋㄨˊ",
    "ㄋㄨˋ",
    "ㄋㄨㄛˇ",
    "ㄋㄨㄛˊ",
    "ㄋㄨㄛˋ",
    "ㄋㄨㄢˇ",
    "ㄋㄨㄣˊ",
    "ㄋㄨㄣˋ",
    "ㄋㄨㄥˇ",
    "ㄋㄨㄥˊ",
    "ㄋㄨㄥˋ",
    "ㄋㄨㄥ˙",
    "ㄋㄩˇ",
    "ㄋㄩˋ",
    "ㄋㄩㄝˋ",
    "ㄌㄚ",
    "ㄌㄚˇ",
    "ㄌㄚˊ",
    "ㄌㄚˋ",
    "ㄌㄚ˙",
    "ㄌㄛ˙",
    "ㄌㄜˋ",
    "ㄌㄜ˙",
    "ㄌㄞˇ",
    "ㄌㄞˊ",
    "ㄌㄞˋ",
    "ㄌㄟ",
    "ㄌㄟˇ",
    "ㄌㄟˊ",
    "ㄌㄟˋ",
    "ㄌㄠ",
    "ㄌㄠˇ",
    "ㄌㄠˊ",
    "ㄌㄠˋ",
    "ㄌㄡ",
    "ㄌㄡˇ",
    "ㄌㄡˊ",
    "ㄌㄡˋ",
    "ㄌㄡ˙",
    "ㄌㄢˇ",
    "ㄌㄢˊ",
    "ㄌㄢˋ",
    "ㄌㄤ",
    "ㄌㄤˇ",
    "ㄌㄤˊ",
    "ㄌㄤˋ",
    "ㄌㄤ˙",
    "ㄌㄥˇ",
    "ㄌㄥˊ",
    "ㄌㄥˋ",
    "ㄌㄧ",
    "ㄌㄧˇ",
    "ㄌㄧˊ",
    "ㄌㄧˋ",
    "ㄌㄧ˙",
    "ㄌㄧㄚˇ",
    "ㄌㄧㄝ",
    "ㄌㄧㄝˇ",
    "ㄌㄧㄝˊ",
    "ㄌㄧㄝˋ",
    "ㄌㄧㄠ",
    "ㄌㄧㄠˇ",
    "ㄌㄧㄠˊ",
    "ㄌㄧㄠˋ",
    "ㄌㄧㄡ",
    "ㄌㄧㄡˇ",
    "ㄌㄧㄡˊ",
    "ㄌㄧㄡˋ",
    "ㄌㄧㄡ˙",
    "ㄌㄧㄢˇ",
    "ㄌㄧㄢˊ",
    "ㄌㄧㄢˋ",
    "ㄌㄧㄣˇ",
    "ㄌㄧㄣˊ",
    "ㄌㄧㄣˋ",
    "ㄌㄧㄤˇ",
    "ㄌㄧㄤˊ",
    "ㄌㄧㄤˋ",
    "ㄌㄧㄥ",
    "ㄌㄧㄥˇ",
    "ㄌㄧㄥˊ",
    "ㄌㄧㄥˋ",
    "ㄌㄨ",
    "ㄌㄨˇ",
    "ㄌㄨˊ",
    "ㄌㄨˋ",
    "ㄌㄨ˙",
    "ㄌㄨㄛ",
    "ㄌㄨㄛˇ",
    "ㄌㄨㄛˊ",
    "ㄌㄨㄛˋ",
    "ㄌㄨㄢˇ",
    "ㄌㄨㄢˊ",
    "ㄌㄨㄢˋ",
    "ㄌㄨㄣ",
    "ㄌㄨㄣˇ",
    "ㄌㄨㄣˊ",
    "ㄌㄨㄣˋ",
    "ㄌㄨㄥˇ",
    "ㄌㄨㄥˊ",
    "ㄌㄨㄥˋ",
    "ㄌㄩˇ",
    "ㄌㄩˊ",
    "ㄌㄩˋ",
    "ㄌㄩㄝˋ",
    "ㄍㄚ",
    "ㄍㄚˇ",
    "ㄍㄚˊ",
    "ㄍㄚˋ",
    "ㄍㄚ˙",
    "ㄍㄜ",
    "ㄍㄜˇ",
    "ㄍㄜˊ",
    "ㄍㄜˋ",
    "ㄍㄜ˙",
    "ㄍㄞ",
    "ㄍㄞˇ",
    "ㄍㄞˋ",
    "ㄍㄟˇ",
    "ㄍㄠ",
    "ㄍㄠˇ",
    "ㄍㄠˋ",
    "ㄍㄡ",
    "ㄍㄡˇ",
    "ㄍㄡˋ",
    "ㄍㄢ",
    "ㄍㄢˇ",
    "ㄍㄢˋ",
    "ㄍㄣ",
    "ㄍㄣˇ",
    "ㄍㄣˊ",
    "ㄍㄣˋ",
    "ㄍㄤ",
    "ㄍㄤˇ",
    "ㄍㄤˋ",
    "ㄍㄥ",
    "ㄍㄥˇ",
    "ㄍㄥˋ",
    "ㄍㄨ",
    "ㄍㄨˇ",
    "ㄍㄨˊ",
    "ㄍㄨˋ",
    "ㄍㄨㄚ",
    "ㄍㄨㄚˇ",
    "ㄍㄨㄚˋ",
    "ㄍㄨㄛ",
    "ㄍㄨㄛˇ",
    "ㄍㄨㄛˊ",
    "ㄍㄨㄛˋ",
    "ㄍㄨㄛ˙",
    "ㄍㄨㄞ",
    "ㄍㄨㄞˇ",
    "ㄍㄨㄞˋ",
    "ㄍㄨㄟ",
    "ㄍㄨㄟˇ",
    "ㄍㄨㄟˋ",
    "ㄍㄨㄢ",
    "ㄍㄨㄢˇ",
    "ㄍㄨㄢˋ",
    "ㄍㄨㄣˇ",
    "ㄍㄨㄣˋ",
    "ㄍㄨㄤ",
    "ㄍㄨㄤˇ",
    "ㄍㄨㄤˋ",
    "ㄍㄨㄥ",
    "ㄍㄨㄥˇ",
    "ㄍㄨㄥˋ",
    "ㄎㄚ",
    "ㄎㄚˇ",
    "ㄎㄚˋ",
    "ㄎㄜ",
    "ㄎㄜˇ",
    "ㄎㄜˊ",
    "ㄎㄜˋ",
    "ㄎㄞ",
    "ㄎㄞˇ",
    "ㄎㄞˋ",
    "ㄎㄠ",
    "ㄎㄠˇ",
    "ㄎㄠˋ",
    "ㄎㄡ",
    "ㄎㄡˇ",
    "ㄎㄡˋ",
    "ㄎㄢ",
    "ㄎㄢˇ",
    "ㄎㄢˋ",
    "ㄎㄣˇ",
    "ㄎㄣˋ",
    "ㄎㄤ",
    "ㄎㄤˇ",
    "ㄎㄤˊ",
    "ㄎㄤˋ",
    "ㄎㄥ",
    "ㄎㄥˇ",
    "ㄎㄨ",
    "ㄎㄨˇ",
    "ㄎㄨˋ",
    "ㄎㄨㄚ",
    "ㄎㄨㄚˇ",
    "ㄎㄨㄚˋ",
    "ㄎㄨㄛˇ",
    "ㄎㄨㄛˋ",
    "ㄎㄨㄞ",
    "ㄎㄨㄞˇ",
    "ㄎㄨㄞˋ",
    "ㄎㄨㄟ",
    "ㄎㄨㄟˇ",
    "ㄎㄨㄟˊ",
    "ㄎㄨㄟˋ",
    "ㄎㄨㄢ",
    "ㄎㄨㄢˇ",
    "ㄎㄨㄣ",
    "ㄎㄨㄣˇ",
    "ㄎㄨㄣˋ",
    "ㄎㄨㄤ",
    "ㄎㄨㄤˇ",
    "ㄎㄨㄤˊ",
    "ㄎㄨㄤˋ",
    "ㄎㄨㄥ",
    "ㄎㄨㄥˇ",
    "ㄎㄨㄥˋ",
    "ㄏㄚ",
    "ㄏㄚˇ",
    "ㄏㄚˊ",
    "ㄏㄜ",
    "ㄏㄜˊ",
    "ㄏㄜˋ",
    "ㄏㄞ",
    "ㄏㄞˇ",
    "ㄏㄞˊ",
    "ㄏㄞˋ",
    "ㄏㄟ",
    "ㄏㄟˇ",
    "ㄏㄠ",
    "ㄏㄠˇ",
    "ㄏㄠˊ",
    "ㄏㄠˋ",
    "ㄏㄡ",
    "ㄏㄡˇ",
    "ㄏㄡˊ",
    "ㄏㄡˋ",
    "ㄏㄡ˙",
    "ㄏㄢ",
    "ㄏㄢˇ",
    "ㄏㄢˊ",
    "ㄏㄢˋ",
    "ㄏㄣˇ",
    "ㄏㄣˊ",
    "ㄏㄣˋ",
    "ㄏㄤ",
    "ㄏㄤˇ",
    "ㄏㄤˊ",
    "ㄏㄤˋ",
    "ㄏㄥ",
    "ㄏㄥˊ",
    "ㄏㄥˋ",
    "ㄏㄥ˙",
    "ㄏㄨ",
    "ㄏㄨˇ",
    "ㄏㄨˊ",
    "ㄏㄨˋ",
    "ㄏㄨㄚ",
    "ㄏㄨㄚˊ",
    "ㄏㄨㄚˋ",
    "ㄏㄨㄛ",
    "ㄏㄨㄛˇ",
    "ㄏㄨㄛˊ",
    "ㄏㄨㄛˋ",
    "ㄏㄨㄛ˙",
    "ㄏㄨㄞˊ",
    "ㄏㄨㄞˋ",
    "ㄏㄨㄟ",
    "ㄏㄨㄟˇ",
    "ㄏㄨㄟˊ",
    "ㄏㄨㄟˋ",
    "ㄏㄨㄢ",
    "ㄏㄨㄢˇ",
    "ㄏㄨㄢˊ",
    "ㄏㄨㄢˋ",
    "ㄏㄨㄣ",
    "ㄏㄨㄣˇ",
    "ㄏㄨㄣˊ",
    "ㄏㄨㄣˋ",
    "ㄏㄨㄤ",
    "ㄏㄨㄤˇ",
    "ㄏㄨㄤˊ",
    "ㄏㄨㄤˋ",
    "ㄏㄨㄤ˙",
    "ㄏㄨㄥ",
    "ㄏㄨㄥˇ",
    "ㄏㄨㄥˊ",
    "ㄏㄨㄥˋ",
    "ㄐㄧ",
    "ㄐㄧˇ",
    "ㄐㄧˊ",
    "ㄐㄧˋ",
    "ㄐㄧㄚ",
    "ㄐㄧㄚˇ",
    "ㄐㄧㄚˊ",
    "ㄐㄧㄚˋ",
    "ㄐㄧㄝ",
    "ㄐㄧㄝˇ",
    "ㄐㄧㄝˊ",
    "ㄐㄧㄝˋ",
    "ㄐㄧㄝ˙",
    "ㄐㄧㄠ",
    "ㄐㄧㄠˇ",
    "ㄐㄧㄠˊ",
    "ㄐㄧㄠˋ",
    "ㄐㄧㄡ",
    "ㄐㄧㄡˇ",
    "ㄐㄧㄡˋ",
    "ㄐㄧㄡ˙",
    "ㄐㄧㄢ",
    "ㄐㄧㄢˇ",
    "ㄐㄧㄢˋ",
    "ㄐㄧㄣ",
    "ㄐㄧㄣˇ",
    "ㄐㄧㄣˋ",
    "ㄐㄧㄤ",
    "ㄐㄧㄤˇ",
    "ㄐㄧㄤˋ",
    "ㄐㄧㄥ",
    "ㄐㄧㄥˇ",
    "ㄐㄧㄥˋ",
    "ㄐㄩ",
    "ㄐㄩˇ",
    "ㄐㄩˊ",
    "ㄐㄩˋ",
    "ㄐㄩㄝ",
    "ㄐㄩㄝˇ",
    "ㄐㄩㄝˊ",
    "ㄐㄩㄝˋ",
    "ㄐㄩㄢ",
    "ㄐㄩㄢˇ",
    "ㄐㄩㄢˋ",
    "ㄐㄩㄣ",
    "ㄐㄩㄣˇ",
    "ㄐㄩㄣˋ",
    "ㄐㄩㄥ",
    "ㄐㄩㄥˇ",
    "ㄐㄩㄥˋ",
    "ㄑㄧ",
    "ㄑㄧˇ",
    "ㄑㄧˊ",
    "ㄑㄧˋ",
    "ㄑㄧㄚ",
    "ㄑㄧㄚˇ",
    "ㄑㄧㄚˋ",
    "ㄑㄧㄝ",
    "ㄑㄧㄝˇ",
    "ㄑㄧㄝˊ",
    "ㄑㄧㄝˋ",
    "ㄑㄧㄠ",
    "ㄑㄧㄠˇ",
    "ㄑㄧㄠˊ",
    "ㄑㄧㄠˋ",
    "ㄑㄧㄡ",
    "ㄑㄧㄡˇ",
    "ㄑㄧㄡˊ",
    "ㄑㄧㄢ",
    "ㄑㄧㄢˇ",
    "ㄑㄧㄢˊ",
    "ㄑㄧㄢˋ",
    "ㄑㄧㄣ",
    "ㄑㄧㄣˇ",
    "ㄑㄧㄣˊ",
    "ㄑㄧㄣˋ",
    "ㄑㄧㄤ",
    "ㄑㄧㄤˇ",
    "ㄑㄧㄤˊ",
    "ㄑㄧㄤˋ",
    "ㄑㄧㄥ",
    "ㄑㄧㄥˇ",
    "ㄑㄧㄥˊ",
    "ㄑㄧㄥˋ",
    "ㄑㄩ",
    "ㄑㄩˇ",
    "ㄑㄩˊ",
    "ㄑㄩˋ",
    "ㄑㄩ˙",
    "ㄑㄩㄝ",
    "ㄑㄩㄝˊ",
    "ㄑㄩㄝˋ",
    "ㄑㄩㄢ",
    "ㄑㄩㄢˇ",
    "ㄑㄩㄢˊ",
    "ㄑㄩㄢˋ",
    "ㄑㄩㄣ",
    "ㄑㄩㄣˊ",
    "ㄑㄩㄥ",
    "ㄑㄩㄥˇ",
    "ㄑㄩㄥˊ",
    "ㄒㄧ",
    "ㄒㄧˇ",
    "ㄒㄧˊ",
    "ㄒㄧˋ",
    "ㄒㄧ˙",
    "ㄒㄧㄚ",
    "ㄒㄧㄚˇ",
    "ㄒㄧㄚˊ",
    "ㄒㄧㄚˋ",
    "ㄒㄧㄝ",
    "ㄒㄧㄝˇ",
    "ㄒㄧㄝˊ",
    "ㄒㄧㄝˋ",
    "ㄒㄧㄝ˙",
    "ㄒㄧㄠ",
    "ㄒㄧㄠˇ",
    "ㄒㄧㄠˊ",
    "ㄒㄧㄠˋ",
    "ㄒㄧㄡ",
    "ㄒㄧㄡˇ",
    "ㄒㄧㄡˋ",
    "ㄒㄧㄢ",
    "ㄒㄧㄢˇ",
    "ㄒㄧㄢˊ",
    "ㄒㄧㄢˋ",
    "ㄒㄧㄣ",
    "ㄒㄧㄣˇ",
    "ㄒㄧㄣˊ",
    "ㄒㄧㄣˋ",
    "ㄒㄧㄤ",
    "ㄒㄧㄤˇ",
    "ㄒㄧㄤˊ",
    "ㄒㄧㄤˋ",
    "ㄒㄧㄥ",
    "ㄒㄧㄥˇ",
    "ㄒㄧㄥˊ",
    "ㄒㄧㄥˋ",
    "ㄒㄩ",
    "ㄒㄩˇ",
    "ㄒㄩˊ",
    "ㄒㄩˋ",
    "ㄒㄩㄝ",
    "ㄒㄩㄝˇ",
    "ㄒㄩㄝˊ",
    "ㄒㄩㄝˋ",
    "ㄒㄩㄢ",
    "ㄒㄩㄢˇ",
    "ㄒㄩㄢˊ",
    "ㄒㄩㄢˋ",
    "ㄒㄩㄣ",
    "ㄒㄩㄣˊ",
    "ㄒㄩㄣˋ",
    "ㄒㄩㄥ",
    "ㄒㄩㄥˊ",
    "ㄒㄩㄥˋ",
    "ㄓ",
    "ㄓˇ",
    "ㄓˊ",
    "ㄓˋ",
    "ㄓㄚ",
    "ㄓㄚˇ",
    "ㄓㄚˊ",
    "ㄓㄚˋ",
    "ㄓㄚ˙",
    "ㄓㄜ",
    "ㄓㄜˇ",
    "ㄓㄜˊ",
    "ㄓㄜˋ",
    "ㄓㄜ˙",
    "ㄓㄞ",
    "ㄓㄞˇ",
    "ㄓㄞˊ",
    "ㄓㄞˋ",
    "ㄓㄟˋ",
    "ㄓㄠ",
    "ㄓㄠˇ",
    "ㄓㄠˊ",
    "ㄓㄠˋ",
    "ㄓㄡ",
    "ㄓㄡˇ",
    "ㄓㄡˊ",
    "ㄓㄡˋ",
    "ㄓㄢ",
    "ㄓㄢˇ",
    "ㄓㄢˋ",
    "ㄓㄣ",
    "ㄓㄣˇ",
    "ㄓㄣˋ",
    "ㄓㄤ",
    "ㄓㄤˇ",
    "ㄓㄤˋ",
    "ㄓㄥ",
    "ㄓㄥˇ",
    "ㄓㄥˋ",
    "ㄓㄨ",
    "ㄓㄨˇ",
    "ㄓㄨˊ",
    "ㄓㄨˋ",
    "ㄓㄨㄚ",
    "ㄓㄨㄚˇ",
    "ㄓㄨㄛ",
    "ㄓㄨㄛˊ",
    "ㄓㄨㄛˋ",
    "ㄓㄨㄞ",
    "ㄓㄨㄞˇ",
    "ㄓㄨㄞˋ",
    "ㄓㄨㄟ",
    "ㄓㄨㄟˇ",
    "ㄓㄨㄟˋ",
    "ㄓㄨㄢ",
    "ㄓㄨㄢˇ",
    "ㄓㄨㄢˋ",
    "ㄓㄨㄣ",
    "ㄓㄨㄣˇ",
    "ㄓㄨㄣˋ",
    "ㄓㄨㄤ",
    "ㄓㄨㄤˇ",
    "ㄓㄨㄤˋ",
    "ㄓㄨㄥ",
    "ㄓㄨㄥˇ",
    "ㄓㄨㄥˋ",
    "ㄔ",
    "ㄔˇ",
    "ㄔˊ",
    "ㄔˋ",
    "ㄔㄚ",
    "ㄔㄚˇ",
    "ㄔㄚˊ",
    "ㄔㄚˋ",
    "ㄔㄜ",
    "ㄔㄜˇ",
    "ㄔㄜˋ",
    "ㄔㄞ",
    "ㄔㄞˇ",
    "ㄔㄞˊ",
    "ㄔㄞˋ",
    "ㄔㄠ",
    "ㄔㄠˇ",
    "ㄔㄠˊ",
    "ㄔㄠˋ",
    "ㄔㄡ",
    "ㄔㄡˇ",
    "ㄔㄡˊ",
    "ㄔㄡˋ",
    "ㄔㄢ",
    "ㄔㄢˇ",
    "ㄔㄢˊ",
    "ㄔㄢˋ",
    "ㄔㄣ",
    "ㄔㄣˇ",
    "ㄔㄣˊ",
    "ㄔㄣˋ",
    "ㄔㄤ",
    "ㄔㄤˇ",
    "ㄔㄤˊ",
    "ㄔㄤˋ",
    "ㄔㄥ",
    "ㄔㄥˇ",
    "ㄔㄥˊ",
    "ㄔㄥˋ",
    "ㄔㄨ",
    "ㄔㄨˇ",
    "ㄔㄨˊ",
    "ㄔㄨˋ",
    "ㄔㄨ˙",
    "ㄔㄨㄚ",
    "ㄔㄨㄚˇ",
    "ㄔㄨㄛ",
    "ㄔㄨㄛˋ",
    "ㄔㄨㄞˇ",
    "ㄔㄨㄞˊ",
    "ㄔㄨㄞˋ",
    "ㄔㄨㄟ",
    "ㄔㄨㄟˊ",
    "ㄔㄨㄟˋ",
    "ㄔㄨㄢ",
    "ㄔㄨㄢˇ",
    "ㄔㄨㄢˊ",
    "ㄔㄨㄢˋ",
    "ㄔㄨㄣ",
    "ㄔㄨㄣˇ",
    "ㄔㄨㄣˊ",
    "ㄔㄨㄤ",
    "ㄔㄨㄤˇ",
    "ㄔㄨㄤˊ",
    "ㄔㄨㄤˋ",
    "ㄔㄨㄥ",
    "ㄔㄨㄥˇ",
    "ㄔㄨㄥˊ",
    "ㄔㄨㄥˋ",
    "ㄕ",
    "ㄕˇ",
    "ㄕˊ",
    "ㄕˋ",
    "ㄕ˙",
    "ㄕㄚ",
    "ㄕㄚˇ",
    "ㄕㄚˊ",
    "ㄕㄚˋ",
    "ㄕㄜ",
    "ㄕㄜˇ",
    "ㄕㄜˊ",
    "ㄕㄜˋ",
    "ㄕㄞ",
    "ㄕㄞˇ",
    "ㄕㄞˋ",
    "ㄕㄟˊ",
    "ㄕㄠ",
    "ㄕㄠˇ",
    "ㄕㄠˊ",
    "ㄕㄠˋ",
    "ㄕㄡ",
    "ㄕㄡˇ",
    "ㄕㄡˊ",
    "ㄕㄡˋ",
    "ㄕㄢ",
    "ㄕㄢˇ",
    "ㄕㄢˋ",
    "ㄕㄣ",
    "ㄕㄣˇ",
    "ㄕㄣˊ",
    "ㄕㄣˋ",
    "ㄕㄣ˙",
    "ㄕㄤ",
    "ㄕㄤˇ",
    "ㄕㄤˋ",
    "ㄕㄤ˙",
    "ㄕㄥ",
    "ㄕㄥˇ",
    "ㄕㄥˊ",
    "ㄕㄥˋ",
    "ㄕㄨ",
    "ㄕㄨˇ",
    "ㄕㄨˊ",
    "ㄕㄨˋ",
    "ㄕㄨ˙",
    "ㄕㄨㄚ",
    "ㄕㄨㄚˇ",
    "ㄕㄨㄚˋ",
    "ㄕㄨㄛ",
    "ㄕㄨㄛˋ",
    "ㄕㄨㄞ",
    "ㄕㄨㄞˇ",
    "ㄕㄨㄞˋ",
    "ㄕㄨㄟˇ",
    "ㄕㄨㄟˊ",
    "ㄕㄨㄟˋ",
    "ㄕㄨㄢ",
    "ㄕㄨㄢˋ",
    "ㄕㄨㄣˇ",
    "ㄕㄨㄣˋ",
    "ㄕㄨㄤ",
    "ㄕㄨㄤˇ",
    "ㄕㄨㄤˋ",
    "ㄖ",
    "ㄖˋ",
    "ㄖㄜˇ",
    "ㄖㄜˋ",
    "ㄖㄠˇ",
    "ㄖㄠˊ",
    "ㄖㄠˋ",
    "ㄖㄡˇ",
    "ㄖㄡˊ",
    "ㄖㄡˋ",
    "ㄖㄢˇ",
    "ㄖㄢˊ",
    "ㄖㄣˇ",
    "ㄖㄣˊ",
    "ㄖㄣˋ",
    "ㄖㄤ",
    "ㄖㄤˇ",
    "ㄖㄤˊ",
    "ㄖㄤˋ",
    "ㄖㄥ",
    "ㄖㄥˇ",
    "ㄖㄥˊ",
    "ㄖㄥˋ",
    "ㄖㄨˇ",
    "ㄖㄨˊ",
    "ㄖㄨˋ",
    "ㄖㄨㄛˋ",
    "ㄖㄨㄟˇ",
    "ㄖㄨㄟˊ",
    "ㄖㄨㄟˋ",
    "ㄖㄨㄢˇ",
    "ㄖㄨㄢˊ",
    "ㄖㄨㄣ",
    "ㄖㄨㄣˊ",
    "ㄖㄨㄣˋ",
    "ㄖㄨㄥˇ",
    "ㄖㄨㄥˊ",
    "ㄖㄨㄥˋ",
    "ㄗ",
    "ㄗˇ",
    "ㄗˋ",
    "ㄗ˙",
    "ㄗㄚ",
    "ㄗㄚˇ",
    "ㄗㄚˊ",
    "ㄗㄜˇ",
    "ㄗㄜˊ",
    "ㄗㄜˋ",
    "ㄗㄞ",
    "ㄗㄞˇ",
    "ㄗㄞˋ",
    "ㄗㄞ˙",
    "ㄗㄟˊ",
    "ㄗㄠ",
    "ㄗㄠˇ",
    "ㄗㄠˊ",
    "ㄗㄠˋ",
    "ㄗㄡ",
    "ㄗㄡˇ",
    "ㄗㄡˋ",
    "ㄗㄢ",
    "ㄗㄢˇ",
    "ㄗㄢˊ",
    "ㄗㄢˋ",
    "ㄗㄣˇ",
    "ㄗㄣˋ",
    "ㄗㄤ",
    "ㄗㄤˇ",
    "ㄗㄤˋ",
    "ㄗㄥ",
    "ㄗㄥˋ",
    "ㄗㄨ",
    "ㄗㄨˇ",
    "ㄗㄨˊ",
    "ㄗㄨˋ",
    "ㄗㄨㄛ",
    "ㄗㄨㄛˇ",
    "ㄗㄨㄛˊ",
    "ㄗㄨㄛˋ",
    "ㄗㄨㄟ",
    "ㄗㄨㄟˇ",
    "ㄗㄨㄟˋ",
    "ㄗㄨㄢ",
    "ㄗㄨㄢˇ",
    "ㄗㄨㄢˋ",
    "ㄗㄨㄣ",
    "ㄗㄨㄣˇ",
    "ㄗㄨㄣˋ",
    "ㄗㄨㄥ",
    "ㄗㄨㄥˇ",
    "ㄗㄨㄥˋ",
    "ㄘ",
    "ㄘˇ",
    "ㄘˊ",
    "ㄘˋ",
    "ㄘㄚ",
    "ㄘㄚˇ",
    "ㄘㄚˋ",
    "ㄘㄜˋ",
    "ㄘㄞ",
    "ㄘㄞˇ",
    "ㄘㄞˊ",
    "ㄘㄞˋ",
    "ㄘㄠ",
    "ㄘㄠˇ",
    "ㄘㄠˊ",
    "ㄘㄠˋ",
    "ㄘㄡˋ",
    "ㄘㄢ",
    "ㄘㄢˇ",
    "ㄘㄢˊ",
    "ㄘㄢˋ",
    "ㄘㄣ",
    "ㄘㄣˊ",
    "ㄘㄤ",
    "ㄘㄤˇ",
    "ㄘㄤˊ",
    "ㄘㄤˋ",
    "ㄘㄥ",
    "ㄘㄥˇ",
    "ㄘㄥˊ",
    "ㄘㄥˋ",
    "ㄘㄨ",
    "ㄘㄨˊ",
    "ㄘㄨˋ",
    "ㄘㄨㄛ",
    "ㄘㄨㄛˇ",
    "ㄘㄨㄛˊ",
    "ㄘㄨㄛˋ",
    "ㄘㄨㄟ",
    "ㄘㄨㄟˇ",
    "ㄘㄨㄟˊ",
    "ㄘㄨㄟˋ",
    "ㄘㄨㄢ",
    "ㄘㄨㄢˊ",
    "ㄘㄨㄢˋ",
    "ㄘㄨㄣ",
    "ㄘㄨㄣˇ",
    "ㄘㄨㄣˊ",
    "ㄘㄨㄣˋ",
    "ㄘㄨㄥ",
    "ㄘㄨㄥˇ",
    "ㄘㄨㄥˊ",
    "ㄘㄨㄥˋ",
    "ㄙ",
    "ㄙˇ",
    "ㄙˋ",
    "ㄙㄚ",
    "ㄙㄚˇ",
    "ㄙㄚˋ",
    "ㄙㄚ˙",
    "ㄙㄜˋ",
    "ㄙㄞ",
    "ㄙㄞˋ",
    "ㄙㄠ",
    "ㄙㄠˇ",
    "ㄙㄠˋ",
    "ㄙㄡ",
    "ㄙㄡˇ",
    "ㄙㄡˋ",
    "ㄙㄢ",
    "ㄙㄢˇ",
    "ㄙㄢˋ",
    "ㄙㄣ",
    "ㄙㄤ",
    "ㄙㄤˇ",
    "ㄙㄤˋ",
    "ㄙㄥ",
    "ㄙㄨ",
    "ㄙㄨˊ",
    "ㄙㄨˋ",
    "ㄙㄨㄛ",
    "ㄙㄨㄛˇ",
    "ㄙㄨㄛˊ",
    "ㄙㄨㄛˋ",
    "ㄙㄨㄟ",
    "ㄙㄨㄟˇ",
    "ㄙㄨㄟˊ",
    "ㄙㄨㄟˋ",
    "ㄙㄨㄢ",
    "ㄙㄨㄢˇ",
    "ㄙㄨㄢˋ",
    "ㄙㄨㄣ",
    "ㄙㄨㄣˇ",
    "ㄙㄨㄣˋ",
    "ㄙㄨㄥ",
    "ㄙㄨㄥˇ",
    "ㄙㄨㄥˊ",
    "ㄙㄨㄥˋ",
    "ㄚ",
    "ㄚˇ",
    "ㄚˊ",
    "ㄚˋ",
    "ㄚ˙",
    "ㄛ",
    "ㄛˇ",
    "ㄛˊ",
    "ㄜ",
    "ㄜˇ",
    "ㄜˊ",
    "ㄜˋ",
    "ㄞ",
    "ㄞˇ",
    "ㄞˊ",
    "ㄞˋ",
    "ㄟ",
    "ㄟˋ",
    "ㄠ",
    "ㄠˇ",
    "ㄠˊ",
    "ㄠˋ",
    "ㄡ",
    "ㄡˇ",
    "ㄡˊ",
    "ㄡˋ",
    "ㄢ",
    "ㄢˇ",
    "ㄢˊ",
    "ㄢˋ",
    "ㄣ",
    "ㄣˇ",
    "ㄣˋ",
    "ㄤ",
    "ㄤˇ",
    "ㄤˊ",
    "ㄤˋ",
    "ㄥ",
    "ㄦ",
    "ㄦˇ",
    "ㄦˊ",
    "ㄦˋ",
    "ㄧ",
    "ㄧˇ",
    "ㄧˊ",
    "ㄧˋ",
    "ㄧㄚ",
    "ㄧㄚˇ",
    "ㄧㄚˊ",
    "ㄧㄚˋ",
    "ㄧㄚ˙",
    "ㄧㄛ",
    "ㄧㄛ˙",
    "ㄧㄝ",
    "ㄧㄝˇ",
    "ㄧㄝˊ",
    "ㄧㄝˋ",
    "ㄧㄝ˙",
    "ㄧㄞˊ",
    "ㄧㄠ",
    "ㄧㄠˇ",
    "ㄧㄠˊ",
    "ㄧㄠˋ",
    "ㄧㄡ",
    "ㄧㄡˇ",
    "ㄧㄡˊ",
    "ㄧㄡˋ",
    "ㄧㄢ",
    "ㄧㄢˇ",
    "ㄧㄢˊ",
    "ㄧㄢˋ",
    "ㄧㄣ",
    "ㄧㄣˇ",
    "ㄧㄣˊ",
    "ㄧㄣˋ",
    "ㄧㄤ",
    "ㄧㄤˇ",
    "ㄧㄤˊ",
    "ㄧㄤˋ",
    "ㄧㄤ˙",
    "ㄧㄥ",
    "ㄧㄥˇ",
    "ㄧㄥˊ",
    "ㄧㄥˋ",
    "ㄨ",
    "ㄨˇ",
    "ㄨˊ",
    "ㄨˋ",
    "ㄨㄚ",
    "ㄨㄚˇ",
    "ㄨㄚˊ",
    "ㄨㄚˋ",
    "ㄨㄚ˙",
    "ㄨㄛ",
    "ㄨㄛˇ",
    "ㄨㄛˋ",
    "ㄨㄞ",
    "ㄨㄞˇ",
    "ㄨㄞˋ",
    "ㄨㄟ",
    "ㄨㄟˇ",
    "ㄨㄟˊ",
    "ㄨㄟˋ",
    "ㄨㄢ",
    "ㄨㄢˇ",
    "ㄨㄢˊ",
    "ㄨㄢˋ",
    "ㄨㄣ",
    "ㄨㄣˇ",
    "ㄨㄣˊ",
    "ㄨㄣˋ",
    "ㄨㄤ",
    "ㄨㄤˇ",
    "ㄨㄤˊ",
    "ㄨㄤˋ",
    "ㄨㄥ",
    "ㄨㄥˇ",
    "ㄨㄥˋ",
    "ㄩ",
    "ㄩˇ",
    "ㄩˊ",
    "ㄩˋ",
    "ㄩㄝ",
    "ㄩㄝˋ",
    "ㄩㄢ",
    "ㄩㄢˇ",
    "ㄩㄢˊ",
    "ㄩㄢˋ",
    "ㄩㄣ",
    "ㄩㄣˇ",
    "ㄩㄣˊ",
    "ㄩㄣˋ",
    "ㄩㄥ",
    "ㄩㄥˇ",
    "ㄩㄥˊ",
    "ㄩㄥˋ",
];

/// Public engine for libzhuyin.
///
/// This wraps the generic core::Engine<ZhuyinParser> with zhuyin-specific loading logic.
/// All actual IME logic (segmentation, fuzzy matching, caching, scoring) is in core.
///
/// The inner engine is wrapped in Arc to allow cheap cloning for sharing across editors.
#[derive(Clone)]
pub struct Engine {
    inner: Arc<libchinese_core::Engine<ZhuyinParser>>,
}

impl Engine {
    /// Construct an Engine from a pre-built Model.
    ///
    /// Uses standard zhuyin fuzzy rules configured in the parser.
    /// Parser is created internally with standard bopomofo syllables.
    pub fn new(model: Model) -> Self {
        let fuzzy_rules = crate::standard_fuzzy_rules();
        let parser = ZhuyinParser::new(fuzzy_rules, ZHUYIN_SYLLABLES);
        Self {
            inner: Arc::new(libchinese_core::Engine::new(model, parser)),
        }
    }

    /// Get a cloned Arc to the inner core engine.
    ///
    /// Useful for sharing the engine with ImeEngine and other components.
    pub fn inner_arc(&self) -> Arc<libchinese_core::Engine<ZhuyinParser>> {
        Arc::clone(&self.inner)
    }

    /// Load an engine from a model directory containing runtime artifacts.
    ///
    /// Expected layout (data-dir):
    ///  - lexicon.fst + lexicon.bincode    (lexicon for zhuyin)
    ///  - ngram.bincode                     (serialized NGramModel)
    ///  - lambdas.fst + lambdas.bincode    (interpolator for zhuyin)
    ///  - userdict.redb                     (persistent user dictionary)
    pub fn from_data_dir<P: AsRef<std::path::Path>>(data_dir: P) -> Result<Self, Box<dyn Error>> {
        let data_dir = data_dir.as_ref();

        // Load lexicon from fst + bincode (required)
        let fst_path = data_dir.join("lexicon.fst");
        let bincode_path = data_dir.join("lexicon.bincode");

        let lex = Lexicon::load_from_fst_bincode(&fst_path, &bincode_path).map_err(|e| {
            format!(
                "failed to load lexicon from {:?} and {:?}: {}",
                fst_path, bincode_path, e
            )
        })?;

        // Userdict: use persistent userdict at ~/.zhuyin/userdict.redb
        let userdict = {
            let home = std::env::var("HOME")
                .or_else(|_| std::env::var("USERPROFILE"))
                .unwrap_or_else(|_| ".".to_string());
            let ud_path = std::path::PathBuf::from(home)
                .join(".zhuyin")
                .join("userdict.redb");

            // Create directory if needed
            if let Some(parent) = ud_path.parent() {
                let _ = std::fs::create_dir_all(parent);
            }

            UserDict::new(&ud_path)?
        };

        let model = Model::new(
            lex,
            WordBigram::new(),
            userdict,
            libchinese_core::Config::default(),
        );

        // Parser is created internally using ZHUYIN_SYLLABLES
        Ok(Self::new(model))
    }

    /// Get cache statistics (hits, misses, hit rate)
    pub fn cache_stats(&self) -> (usize, usize, f64) {
        let (hits, misses) = self.inner.cache_stats();
        let total = hits + misses;
        let hit_rate = if total > 0 {
            hits as f64 / total as f64
        } else {
            0.0
        };
        (hits, misses, hit_rate)
    }

    /// Get current cache size
    pub fn cache_size(&self) -> usize {
        self.inner.cache_size()
    }

    /// Clear the cache
    pub fn clear_cache(&self) {
        self.inner.clear_cache();
    }

    /// Get a reference to the user dictionary
    pub fn userdict(&self) -> &UserDict {
        self.inner.userdict()
    }

    /// Get a reference to the config
    pub fn config(&self) -> std::cell::Ref<'_, libchinese_core::Config> {
        self.inner.config()
    }

    /// Get a mutable reference to the config
    pub fn config_mut(&self) -> std::cell::RefMut<'_, libchinese_core::Config> {
        self.inner.config_mut()
    }

    /// Commit a phrase to the user dictionary (learning).
    ///
    /// This increases the frequency/score for the given phrase, allowing the
    /// IME to learn user preferences over time.
    pub fn commit(&self, phrase: &str) {
        self.inner.commit(phrase);
    }

    /// Main input API. Returns ranked `Candidate` items for the given raw zhuyin input.
    ///
    /// Delegates to core::Engine which handles:
    /// 1. Parser segmentation into syllable sequences
    /// 2. Fuzzy key generation for all alternatives (NOW WORKING!)
    /// 3. Lexicon lookups and n-gram scoring
    /// 4. Penalty application for fuzzy matches (NOW WORKING!)
    /// 5. Result caching (NOW AVAILABLE!)
    pub fn input(&self, input: &str) -> Vec<Candidate> {
        self.inner.input(input)
    }
}

/// Create an IME engine with HSU keyboard layout fuzzy rules.
///
/// HSU layout is optimized for efficiency with finals on the home row.
/// Common typing errors: ㄓ/ㄐ (j key), ㄔ/ㄑ (q key), ㄕ/ㄒ (x key).
///
/// # Arguments
/// * `data_dir` - Path to directory containing zhuyin data files
/// * `page_size` - Number of candidates to show per page (typically 5-9)
///
/// # Returns
/// `ImeEngine<ZhuyinParser>` configured with HSU fuzzy rules
pub fn create_ime_engine_hsu<P: AsRef<std::path::Path>>(
    data_dir: P,
    page_size: usize,
) -> Result<libchinese_core::ImeEngine<ZhuyinParser>, Box<dyn Error>> {
    let data_dir = data_dir.as_ref();

    // Load model from data directory
    let fst_path = data_dir.join("lexicon.fst");
    let bincode_path = data_dir.join("lexicon.bincode");
    let lex = Lexicon::load_from_fst_bincode(&fst_path, &bincode_path)?;

    // User dictionary
    let home = std::env::var("HOME")
        .or_else(|_| std::env::var("USERPROFILE"))
        .unwrap_or_else(|_| ".".to_string());
    let ud_path = std::path::PathBuf::from(home)
        .join(".zhuyin")
        .join("userdict.redb");
    if let Some(parent) = ud_path.parent() {
        let _ = std::fs::create_dir_all(parent);
    }
    let userdict = UserDict::new(&ud_path)?;

    // Create model with default config
    let model = Model::new(
        lex,
        WordBigram::new(),
        userdict,
        libchinese_core::Config::default(),
    );

    // Create parser with HSU fuzzy rules
    let fuzzy_rules = crate::fuzzy_presets::hsu_fuzzy_rules();
    let parser = ZhuyinParser::new(fuzzy_rules, ZHUYIN_SYLLABLES);

    // Create core engine
    let core_engine = Arc::new(libchinese_core::Engine::new(model, parser));

    // Create IME engine
    Ok(libchinese_core::ImeEngine::from_arc_with_page_size(
        core_engine,
        page_size,
    ))
}

/// Create an IME engine with Standard keyboard layout fuzzy rules.
///
/// Standard layout is the most common zhuyin keyboard layout.
/// Common typing errors: nasal finals ㄢ/ㄤ, ㄣ/ㄥ, ㄧㄣ/ㄧㄥ.
///
/// # Arguments
/// * `data_dir` - Path to directory containing zhuyin data files
/// * `page_size` - Number of candidates to show per page (typically 5-9)
///
/// # Returns
/// `ImeEngine<ZhuyinParser>` configured with Standard fuzzy rules
pub fn create_ime_engine_standard<P: AsRef<std::path::Path>>(
    data_dir: P,
    page_size: usize,
) -> Result<libchinese_core::ImeEngine<ZhuyinParser>, Box<dyn Error>> {
    let data_dir = data_dir.as_ref();

    // Load model (same as HSU)
    let fst_path = data_dir.join("lexicon.fst");
    let bincode_path = data_dir.join("lexicon.bincode");
    let lex = Lexicon::load_from_fst_bincode(&fst_path, &bincode_path)?;

    let home = std::env::var("HOME")
        .or_else(|_| std::env::var("USERPROFILE"))
        .unwrap_or_else(|_| ".".to_string());
    let ud_path = std::path::PathBuf::from(home)
        .join(".zhuyin")
        .join("userdict.redb");
    if let Some(parent) = ud_path.parent() {
        let _ = std::fs::create_dir_all(parent);
    }
    let userdict = UserDict::new(&ud_path)?;

    let model = Model::new(
        lex,
        WordBigram::new(),
        userdict,
        libchinese_core::Config::default(),
    );

    // Create parser with Standard fuzzy rules
    let fuzzy_rules = crate::fuzzy_presets::standard_fuzzy_rules();
    let parser = ZhuyinParser::new(fuzzy_rules, ZHUYIN_SYLLABLES);

    let core_engine = Arc::new(libchinese_core::Engine::new(model, parser));

    Ok(libchinese_core::ImeEngine::from_arc_with_page_size(
        core_engine,
        page_size,
    ))
}

/// Create an IME engine with ETEN keyboard layout fuzzy rules.
///
/// ETEN layout is used in ETEN Chinese System (倚天中文系統).
/// Similar error patterns to Standard layout.
///
/// # Arguments
/// * `data_dir` - Path to directory containing zhuyin data files
/// * `page_size` - Number of candidates to show per page (typically 5-9)
///
/// # Returns
/// `ImeEngine<ZhuyinParser>` configured with ETEN fuzzy rules
pub fn create_ime_engine_eten<P: AsRef<std::path::Path>>(
    data_dir: P,
    page_size: usize,
) -> Result<libchinese_core::ImeEngine<ZhuyinParser>, Box<dyn Error>> {
    let data_dir = data_dir.as_ref();

    // Load model (same as HSU/Standard)
    let fst_path = data_dir.join("lexicon.fst");
    let bincode_path = data_dir.join("lexicon.bincode");
    let lex = Lexicon::load_from_fst_bincode(&fst_path, &bincode_path)?;

    let home = std::env::var("HOME")
        .or_else(|_| std::env::var("USERPROFILE"))
        .unwrap_or_else(|_| ".".to_string());
    let ud_path = std::path::PathBuf::from(home)
        .join(".zhuyin")
        .join("userdict.redb");
    if let Some(parent) = ud_path.parent() {
        let _ = std::fs::create_dir_all(parent);
    }
    let userdict = UserDict::new(&ud_path)?;

    let model = Model::new(
        lex,
        WordBigram::new(),
        userdict,
        libchinese_core::Config::default(),
    );

    // Create parser with ETEN fuzzy rules
    let fuzzy_rules = crate::fuzzy_presets::eten_fuzzy_rules();
    let parser = ZhuyinParser::new(fuzzy_rules, ZHUYIN_SYLLABLES);

    let core_engine = Arc::new(libchinese_core::Engine::new(model, parser));

    Ok(libchinese_core::ImeEngine::from_arc_with_page_size(
        core_engine,
        page_size,
    ))
}
